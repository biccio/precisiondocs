<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ps on → PrecisionDocs</title>
    <link>/p/</link>
    <description>→ PrecisionDocs (Ps)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    

    
    <lastBuildDate>Mon, 30 Sep 2024 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="/p/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to use Obsidian and Github to Organize and Maintain your Tech Documentation</title>
      <link>/p/how-to-use-obsidian-and-github-to-organize-and-maintain-your-tech-document/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/p/how-to-use-obsidian-and-github-to-organize-and-maintain-your-tech-document/</guid>
      <description>&lt;h2 id=&#34;introduction-managing-information-effectively&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#introduction-managing-information-effectively&#34;&gt;
        #
    &lt;/a&gt;
    Introduction: Managing Information Effectively
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;In today’s fast-paced technical environments, clear and well-organized documentation is key to ensuring smooth workflows and successful collaboration. Whether you’re working on API documentation, software architecture overviews, or development processes, managing this information effectively is essential. Two tools that offer a powerful solution for handling technical documentation are &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt; and &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;. Together, they provide an efficient system for writing, organizing, and sharing technical documents.&lt;/p&gt;
&lt;p&gt;In this article, we’ll explore how to use Obsidian’s note-taking capabilities in combination with GitHub’s version control and collaborative features to streamline your technical documentation workflow.&lt;/p&gt;
&lt;h2 id=&#34;obsidian-and-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#obsidian-and-github&#34;&gt;
        #
    &lt;/a&gt;
    Obsidian and GitHub
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Github is the most important git platform for code storage, continuous integration and version control, and it&amp;rsquo;s also widely-used for tech documentation storage and collaborative editing, usually in addition with static site generators like &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, &lt;a href=&#34;https://docusaurus.io/&#34;&gt;Docusaurus&lt;/a&gt;. Obsidian is one of the best markdown editor around, with a great and very usable WYSIWYG interface, and some cool plugins that makes it the perfect all-in-one platform to manage tech documentation content. But how can we make the two tool work together?&lt;/p&gt;
&lt;h2 id=&#34;setting-up-obsidian-for-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#setting-up-obsidian-for-documentation&#34;&gt;
        #
    &lt;/a&gt;
    Setting Up Obsidian for Documentation
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;First of all you&amp;rsquo;ll want to set up your workspace. After downloading and installing &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;, you will create a dedicated vault for your documentation, and you&amp;rsquo;ll start writing your documentation files. In terms of formatting, Obsidian supports markdown, so you can include headings, subheadings, code snippets, tables, and other essential elements for technical documentation. Tagging is another useful feature in Obsidian, allowing you to categorize your notes and easily find related content. By using &lt;strong&gt;metadata and tags&lt;/strong&gt;, you can add context to your documentation and ensure it is well-organized.&lt;/p&gt;
&lt;h2 id=&#34;integrating-obsidian-with-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#integrating-obsidian-with-github&#34;&gt;
        #
    &lt;/a&gt;
    Integrating Obsidian with GitHub
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Once your documentation is set up in Obsidian, the next step is to integrate it with GitHub to enable version control and collaboration. This process involves linking your Obsidian vault with a &lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/create-a-repo&#34;&gt;GitHub repository&lt;/a&gt;. If you haven’t already, &lt;a href=&#34;https://github.com/new&#34;&gt;create a repository on GitHub&lt;/a&gt; specifically for your documentation.
Then, to link Obsidian with GitHub, you will use your terminal.&lt;/p&gt;
&lt;p&gt;Go to the folder where your Obsidian Vault is stored and use this command to initialize your local repo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, prepare and commit your files, add the Github repository as origin for your local one, and push to the main branch of the repository the content you created with Obsidian&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin https://github.com/your_user/your_repo.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now your local Obsidian Vault is connected to your Github repository.&lt;/p&gt;
&lt;h2 id=&#34;continuous-integration-within-obsidian&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#continuous-integration-within-obsidian&#34;&gt;
        #
    &lt;/a&gt;
    Continuous integration within Obsidian
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Now that your local and remote repos are aligned, how will you update your newly edited content directly within Obsidian? You can add to Obsidian a &lt;a href=&#34;https://github.com/Vinzent03/obsidian-git&#34;&gt;Git plugin&lt;/a&gt;, to make it very easy to update your content without using your terminal.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to menu &lt;strong&gt;Obsidian&lt;/strong&gt; → &lt;strong&gt;Preferences&lt;/strong&gt; → &lt;strong&gt;Community&lt;/strong&gt; plugin and turn them on (they&amp;rsquo;re off by default).&lt;/li&gt;
&lt;li&gt;Search &amp;ldquo;Git&amp;rdquo; in the plugin repository.&lt;/li&gt;
&lt;li&gt;Install and enable the plugin.&lt;/li&gt;
&lt;li&gt;You will notice a Git icon on the left hand sidebar. Press that button and on the right hand side of the interface you will notice the Git panel, with &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt; commands ready to be used within Obsidian.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You&amp;rsquo;ll now ready to use Obsidian to edit your documentation content in a visual environment, with easy collaborative storage on Github&lt;/p&gt;
&lt;h2 id=&#34;publish-your-content&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#publish-your-content&#34;&gt;
        #
    &lt;/a&gt;
    Publish your Content
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;If you have your files on Github and you need to publish them in an easy way, you may want to choose &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;. &lt;a href=&#34;https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site&#34;&gt;Here&amp;rsquo;s a tutorial&lt;/a&gt; that will easily guide you through all the steps needed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Pros and Cons of Embedding Documentation in Code</title>
      <link>/p/the-pros-and-cons-of-embedding-technical-documentation-inside-the-codebase/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/p/the-pros-and-cons-of-embedding-technical-documentation-inside-the-codebase/</guid>
      <description>&lt;h2 id=&#34;introduction-choosing-the-best-place-for-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#introduction-choosing-the-best-place-for-documentation&#34;&gt;
        #
    &lt;/a&gt;
    Introduction: Choosing the Best Place for Documentation
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;f you’ve ever worked with code and tech documentation, you may have asked yourself, “Where should all that essential information go?” Embedding documentation directly in the codebase versus keeping it separate (like in a standalone knowledge base) each comes with pros and cons, along with specific use cases where one approach may work better than the other. Here, we’ll examine the arguments for both options to help you decide which method best fits your project.&lt;/p&gt;
&lt;h2 id=&#34;why-choose-to-embed-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#why-choose-to-embed-documentation&#34;&gt;
        #
    &lt;/a&gt;
    Why choose to embed documentation
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;For developers who spend most of their time in an &lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_development_environment&#34;&gt;IDE&lt;/a&gt;, having documentation alongside the code itself makes a huge difference. With embedded documentation, developers avoid hunting through separate tools, finding essential information—function descriptions, parameters, tricky logic explanations—all integrated into the code. This ease of access saves time and reduces context-switching, especially valuable in fast-paced or Agile environments.&lt;/p&gt;
&lt;p&gt;Furthermore, &lt;strong&gt;Embedded documentation is often more accurate&lt;/strong&gt;. When a method or function changes, it&amp;rsquo;s easy for developers to quickly update the related docstring and comment, to prevent outdated documentation. Keeping the code and documentation close together is a huge help, especially for small teams that may not have time or resources to maintain a separate workflow for tech writing.&lt;/p&gt;
&lt;h3 id=&#34;some-drawbacks-of-embedded-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#some-drawbacks-of-embedded-documentation&#34;&gt;
        ##
    &lt;/a&gt;
    Some Drawbacks of Embedded Documentation
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;While embedded comments and &lt;a href=&#34;https://it.wikipedia.org/wiki/Docstring&#34;&gt;docstrings&lt;/a&gt; work for specific, isolated explanations, &lt;strong&gt;they can clutter the code if overused.&lt;/strong&gt; Readability may suffer, especially when sections are filled with verbose documentation that obscures the actual code logic. There’s also limited formatting flexibility—comments in code are generally plain text, which doesn’t allow for rich formatting like tables, images, or structured examples&lt;/p&gt;
&lt;h3 id=&#34;use-case-for-embedded-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#use-case-for-embedded-documentation&#34;&gt;
        ##
    &lt;/a&gt;
    Use case for embedded documentation
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Embedded documentation is most effective when projects focus on technical use cases that benefit directly from inline clarification. For example, if you’re building an API, inline docstrings make each function’s purpose, parameters, and output clear. Combined with tools like &lt;a href=&#34;https://www.sphinx-doc.org/&#34;&gt;Sphinx&lt;/a&gt; or &lt;a href=&#34;https://jsdoc.app/&#34;&gt;JSDoc&lt;/a&gt;, these inline comments can even auto-generate documentation pages, making them accessible without the need for manual upkeep.&lt;/p&gt;
&lt;h2 id=&#34;why-use-separate-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#why-use-separate-documentation&#34;&gt;
        #
    &lt;/a&gt;
    Why Use Separate Documentation?
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;In contrast, keeping documentation separate from code can be a great choice, &lt;strong&gt;especially for larger, cross-functional teams or complex projects&lt;/strong&gt;. With dedicated documentation tools like &lt;a href=&#34;https://www.atlassian.com/software/confluence&#34;&gt;Confluence&lt;/a&gt;, &lt;a href=&#34;https://www.notion.so/&#34;&gt;Notion&lt;/a&gt;, or &lt;a href=&#34;https://www.gitbook.com/&#34;&gt;GitBook&lt;/a&gt;, you can create comprehensive guides, tutorials, and high-level overviews that surpass the limitations of inline comments. Separate documentation allows you to include multimedia elements like tables, diagrams, and step-by-step user flows, making it ideal for non-developers or anyone who might be intimidated by the codebase.&lt;/p&gt;
&lt;p&gt;Keeping documentation separate from the codebase also makes it more accessible to &lt;strong&gt;non-developer stakeholders&lt;/strong&gt; like product managers or customer support. Many documentation platforms include advanced search and organizational features, making it easier to find specific information than if it were buried in code comments.&lt;/p&gt;
&lt;h3 id=&#34;potential-downsides-of-separate-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#potential-downsides-of-separate-documentation&#34;&gt;
        ##
    &lt;/a&gt;
    Potential Downsides of Separate Documentation
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;One common challenge with separate documentation is that it’s prone to getting out of sync with the actual code. Without a rigorous update process, changes to the code may not always reflect in the documentation, leading to potential confusion. Separate documentation also requires more upkeep, often involving additional workflow steps like reviews or approvals, which can slow down development and add maintenance overhead.&lt;/p&gt;
&lt;h3 id=&#34;use-cases-for-separate-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#use-cases-for-separate-documentation&#34;&gt;
        ##
    &lt;/a&gt;
    Use Cases for Separate Documentation
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Separate documentation is essential for larger, more complex projects where high-level overviews, architectural diagrams, or tutorials are common. For onboarding, a structured knowledge base that provides an overview of architecture, workflows, and team processes is more accessible than embedded comments alone. High-level architectural diagrams, setup instructions, or step-by-step tutorials for feature implementations are often better suited to a dedicated documentation platform.&lt;/p&gt;
&lt;h2 id=&#34;a-common-middle-ground-combining-embedded-and-separate-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#a-common-middle-ground-combining-embedded-and-separate-documentation&#34;&gt;
        #
    &lt;/a&gt;
    A Common Middle Ground: Combining Embedded and Separate Documentation
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;For many teams, a balanced approach is often the best solution. Smaller projects or those primarily managed by developers might benefit from embedded documentation for its simplicity. In contrast, larger, cross-functional projects typically require a dedicated documentation platform to support collaboration, onboarding, and in-depth guides.&lt;/p&gt;
&lt;p&gt;A middle-ground approach could be to use &lt;strong&gt;embedded documentation for lower-level details&lt;/strong&gt;—method descriptions, parameters, and inline clarifications of complex logic—while using a separate documentation tool for &lt;strong&gt;higher-level overviews, architecture diagrams, and tutorials&lt;/strong&gt;. This method allows the code to stay readable and uncluttered, while higher-level information remains accessible, flexible, and easy to maintain.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Build and Deploy a Tech Documentation Static Site with Hugo</title>
      <link>/p/how-to-build-and-deploy-a-blog-with-hugo-github-and-netlify/</link>
      <pubDate>Fri, 23 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>/p/how-to-build-and-deploy-a-blog-with-hugo-github-and-netlify/</guid>
      <description>&lt;h2 id=&#34;introduction--a-static-site-for-tech-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#introduction--a-static-site-for-tech-documentation&#34;&gt;
        #
    &lt;/a&gt;
    Introduction:  A Static Site for Tech Documentation
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Static site generation is a very popular solution in today&amp;rsquo;s publishing environments, especially for technical documentation. The available frameworks are solid and easy to use, and the resulting website is blazing fast with no hiccups and zero render time. If you add Github to the workflow as a storage solution, and Netlify as deployment framework, you have a perfect solution to a fast and clean publishing process.
In this article, I&amp;rsquo;ll describe all the steps you&amp;rsquo;ll need to create a Tech Documentation website with Hugo using Github and Netlify for deployment.&lt;/p&gt;
&lt;h2 id=&#34;framework-hugo&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#framework-hugo&#34;&gt;
        #
    &lt;/a&gt;
    Framework: Hugo
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;As static site generator, I went for &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. It&amp;rsquo;s a solid framework, with good themes, and it&amp;rsquo;s based on markdown files organized in a simple file system. To install the Hugo framework, you need to start by setting up Hugo on your machine. You can install Hugo via a package manager or download it directly. Hugo implements &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;themes&lt;/a&gt; to add ready made frontend to your website (or you can create a custom theme for yourself). For Hugo you can find a well known theme called Docsy, hosted on Google Github and unofficially supported, but for the purpose of this post we&amp;rsquo;re going to use &lt;a href=&#34;https://github.com/thingsym/hugo-theme-techdoc&#34;&gt;Techdoc&lt;/a&gt;, easier to manage if you&amp;rsquo;re new to Hugo.&lt;/p&gt;
&lt;p&gt;Here is a step-by-step guide to installing the Hugo framework, creating a new website, and installing Techdoc.&lt;/p&gt;
&lt;h3 id=&#34;step-1-install-hugo&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-1-install-hugo&#34;&gt;
        ##
    &lt;/a&gt;
    Step 1: Install Hugo
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;For &lt;strong&gt;macOS&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For &lt;strong&gt;Linux&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For &lt;strong&gt;Windows&lt;/strong&gt;:
Download the binary from the &lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;Hugo GitHub releases&lt;/a&gt; and add it to your PATH.&lt;/p&gt;
&lt;p&gt;Once Hugo is installed, check if it’s working correctly by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-2-create-a-new-website&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-2-create-a-new-website&#34;&gt;
        ##
    &lt;/a&gt;
    Step 2: Create a New Website
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Now that you installed Hugo, you need to create a new Hugo site by running the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site my-website
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will create a new folder &lt;code&gt;my-website&lt;/code&gt; with the necessary Hugo folder structure.
At this point, you may want to move into the newly created website folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cd&lt;/span&gt; my-website
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-3-install-the-techdoc-theme&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-3-install-the-techdoc-theme&#34;&gt;
        ##
    &lt;/a&gt;
    Step 3: Install the Techdoc Theme
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;To install Techdoc you&amp;rsquo;re going to use Git submodules. Run the following command to initialize &lt;code&gt;git&lt;/code&gt; and to add the theme to &lt;code&gt;themes&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add https://github.com/thingsym/hugo-theme-techdoc.git themes/hugo-theme-techdoc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that the theme is installed, you will need to configure Hugo to use it at its best. Look for the &lt;a href=&#34;https://github.com/thingsym/hugo-theme-techdoc/blob/master/exampleSite/hugo.toml&#34;&gt;hugo.toml&lt;/a&gt; file in exampleSite folder of the theme and copy it in the root of your newly created website&lt;/p&gt;
&lt;p&gt;Now you&amp;rsquo; re ready to launch the website using this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will make your site available at &lt;code&gt;http://localhost:1313&lt;/code&gt;. Hugo will automatically rebuild&lt;/p&gt;
&lt;h2 id=&#34;repository-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#repository-github&#34;&gt;
        #
    &lt;/a&gt;
    Repository: Github
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Once your site is ready, you may want to create a repository on &lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt; and put your website in it. This way you&amp;rsquo;ll be able to easily push updates online, and - as we&amp;rsquo;ll see - deploy the content.
First of all, you will create a repository on Github from your profile page, giving it a name of your choice and deciding for it to be &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt;. Then you&amp;rsquo;ll go back to your terminal and initialize &lt;code&gt;git&lt;/code&gt; using the commands provided from Github to connect your local repo to the online counterpart.  Git is already initalized in your folder so you won&amp;rsquo;t need &lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin https://github.com/biccio/prova.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you&amp;rsquo;re all set! Let&amp;rsquo;s go to deployment!&lt;/p&gt;
&lt;h2 id=&#34;deployment-netlify&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#deployment-netlify&#34;&gt;
        #
    &lt;/a&gt;
    Deployment: Netlify
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Netlify is a great solution to deploy a website from a variety of framework, providing a great interface to manage multiple websites and their build and deployment. Netlify offers a free starter package with &lt;strong&gt;100 GB of bandwidth&lt;/strong&gt;, &lt;strong&gt;300 build per minutes&lt;/strong&gt; for a single member seat.
The easiest way to create and manage a new website is &lt;em&gt;importing a new project&lt;/em&gt; (other options are: &lt;em&gt;manually uploading your files&lt;/em&gt; or &lt;em&gt;starting from a template&lt;/em&gt;, a great solution if you need to start from scratch with backend and frontend).&lt;/p&gt;
&lt;h3 id=&#34;step-1---create-a-new-website-importing-a-project&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-1---create-a-new-website-importing-a-project&#34;&gt;
        ##
    &lt;/a&gt;
    Step 1 - Create a new website importing a project
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Assuming that you followed the previous steps, now you should have your content and framework stored in a repository on Github.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a new site&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select &lt;strong&gt;Add new site&lt;/strong&gt; → &lt;strong&gt;Import an existing project&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Github&lt;/strong&gt; and authenticate (or you may be already logged in)&lt;/li&gt;
&lt;li&gt;Choose the repo where you stored your content&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Review your configuration&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choose a name for your new website&lt;/li&gt;
&lt;li&gt;Choose your branch (usually &lt;code&gt;main&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Leave blank &lt;em&gt;Base directory&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Write &lt;code&gt;hugo&lt;/code&gt; as &lt;em&gt;Build Command&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt; as &lt;em&gt;Publish Directory&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Leave default in &lt;em&gt;Functions Directory&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;important&lt;/strong&gt;: add &lt;em&gt;Hugo version&lt;/em&gt; as &lt;em&gt;environmental variable&lt;/em&gt;: key: &lt;code&gt;HUGO_VERSION&lt;/code&gt; / value: &lt;code&gt;X.X.X&lt;/code&gt; (you may find your hugo version with the terminal command &lt;code&gt;hugo version&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-2---deploy-the-website&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-2---deploy-the-website&#34;&gt;
        ##
    &lt;/a&gt;
    Step 2 - Deploy the website
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Now you&amp;rsquo;re ready to deploy, push the button and the magic will happen! Note that Netlify will choose for you a temporary subdomain: you&amp;rsquo;ll be able to change it, or even set up a custom domain. If everything is ok, you&amp;rsquo;ll be able to browse your new website in a couple of minutes!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Why Diataxis Framework is A Game Changer for Organizing Technical Documentation</title>
      <link>/p/why-diataxis-framework-is-a-game-changer-for-organizing-technical-documentation/</link>
      <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>/p/why-diataxis-framework-is-a-game-changer-for-organizing-technical-documentation/</guid>
      <description>&lt;h2 id=&#34;introduction-managing-technical-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#introduction-managing-technical-documentation&#34;&gt;
        #
    &lt;/a&gt;
    Introduction: Managing Technical Documentation
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Effective technical documentation is critical to the success of any company, particularly in tech-driven environments where internal teams, partners, and customers rely on precise and accessible information. However, creating and managing high-quality documentation is no easy task. It’s common to end up with scattered, inconsistent, or overly complex content that makes it difficult for users to find what they need, when they need it.&lt;/p&gt;
&lt;p&gt;This is where the &lt;a href=&#34;https://www.diataxis.fr/&#34;&gt;Diátaxis Framework&lt;/a&gt; comes in: a structured, modern approach to organizing technical documentation that not only streamlines your content but also enhances its usability. Whether you&amp;rsquo;re documenting for developers, end-users, or internal teams,&lt;/p&gt;
&lt;h2 id=&#34;what-is-the-diátaxis-framework&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#what-is-the-di%c3%a1taxis-framework&#34;&gt;
        #
    &lt;/a&gt;
    What is the Diátaxis Framework?
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;The Diátaxis Framework, developed by Daniele Procida, is a model that provides a clear, logical methodology that ensures everyone finds the right information easily, categorizing technical documentation into four distinct types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tutorials&lt;/strong&gt; – Learning-oriented content that guides users through accomplishing a specific task. These are step-by-step instructions for beginners who are unfamiliar with your product or technology.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How-To Guides&lt;/strong&gt; – Goal-oriented content that provides solutions for specific problems. These are practical guides that users can reference to quickly accomplish a particular goal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Explanations&lt;/strong&gt; – Understanding-oriented content that dives deeper into the &amp;ldquo;why&amp;rdquo; of things. It’s designed to clarify complex concepts, providing background information and context to help users gain a solid understanding of how something works.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt; – Information-oriented content that is structured for lookup. This includes API documentation, configuration settings, or any form of technical reference material.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The beauty of Diátaxis lies in its &lt;strong&gt;separation of these distinct documentation needs&lt;/strong&gt;. By organizing your content according to these four categories, users are better able to navigate and use your documentation, making easier for them to find out what they&amp;rsquo;re looking for.&lt;/p&gt;
&lt;h2 id=&#34;why-your-company-needs-diátaxis&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#why-your-company-needs-di%c3%a1taxis&#34;&gt;
        #
    &lt;/a&gt;
    Why Your Company Needs Diátaxis
&lt;/div&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;better-user-experience&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#better-user-experience&#34;&gt;
        ##
    &lt;/a&gt;
    Better User Experience
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Documentation is often created with good intentions but ends up being a patchwork of different types of information. This can be overwhelming for users who don’t know where to start, or who need answers quickly.&lt;/p&gt;
&lt;p&gt;With Diátaxis, you structure content based on user intent. A beginner can go straight to tutorials without getting lost in complex explanations, while a seasoned developer can jump into reference material without having to wade through tutorials or conceptual information. This clear delineation creates a smooth and intuitive experience for users, which boosts efficiency and reduces the learning curve.&lt;/p&gt;
&lt;h3 id=&#34;improved-documentation-maintenance&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#improved-documentation-maintenance&#34;&gt;
        ##
    &lt;/a&gt;
    Improved Documentation Maintenance
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;As technical products evolve, so does the associated documentation. Without a clear organizational structure, documentation can quickly become outdated or inconsistent. The Diátaxis Framework introduces clarity and focus, making it easier for teams to manage, update, and expand the content.&lt;/p&gt;
&lt;p&gt;Each type of content (tutorials, how-tos, explanations, and references) serves a specific purpose, so it becomes simpler to identify what needs updating. Additionally, it prevents duplication of effort, as different types of content won&amp;rsquo;t overlap or contradict each other.&lt;/p&gt;
&lt;h3 id=&#34;tailored-to-different-learning-styles&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#tailored-to-different-learning-styles&#34;&gt;
        ##
    &lt;/a&gt;
    Tailored to Different Learning Styles
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;People learn differently. Some prefer hands-on approaches (tutorials), while others want to read detailed explanations (conceptual content). The Diátaxis Framework recognizes this and provides content for every learning style, ensuring that you cater to a diverse audience.&lt;/p&gt;
&lt;p&gt;By breaking up the documentation into these four categories, you give users the freedom to choose the learning path that works best for them. This also reduces friction and frustration, as users won&amp;rsquo;t need to sift through irrelevant information to get to the content they need.&lt;/p&gt;
&lt;h3 id=&#34;enhanced-onboarding-for-new-users-and-developers&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#enhanced-onboarding-for-new-users-and-developers&#34;&gt;
        ##
    &lt;/a&gt;
    Enhanced Onboarding for New Users and Developers
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;One of the biggest challenges companies face is onboarding new employees or users of a product. Well-structured documentation plays a critical role in reducing onboarding time and ensuring that new team members get up to speed quickly.&lt;/p&gt;
&lt;p&gt;Diátaxis provides a clear roadmap: newcomers can start with tutorials for practical, hands-on experience, refer to how-to guides when tackling specific tasks, and consult explanations for deeper understanding. This structure enables a smoother onboarding process and provides a reliable resource as they grow more confident and independent.&lt;/p&gt;
&lt;h3 id=&#34;consistency-across-teams-and-departments&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#consistency-across-teams-and-departments&#34;&gt;
        ##
    &lt;/a&gt;
    Consistency Across Teams and Departments
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;If your company has multiple teams contributing to technical documentation, maintaining consistency in style, format, and tone can be a nightmare. The Diátaxis Framework creates a standardized approach for documentation creation, regardless of the contributor&amp;rsquo;s technical expertise or writing style.&lt;/p&gt;
&lt;p&gt;Teams can adopt a consistent format for each type of content, ensuring that all documentation follows the same logical flow. This not only makes the documentation easier to use but also helps in managing it long-term, as everyone is working with the same structure in mind.&lt;/p&gt;
&lt;h3 id=&#34;implementing-diátaxis-in-your-companys-documentation-workflow&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#implementing-di%c3%a1taxis-in-your-companys-documentation-workflow&#34;&gt;
        ##
    &lt;/a&gt;
    Implementing Diátaxis in Your Company&amp;rsquo;s Documentation Workflow
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Integrating the Diátaxis Framework into your company’s tech documentation workflow can streamline content creation and maintenance while ensuring a more user-centered experience. To get started, follow this main steps&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Create a centralized documentation plan that aligns with Diátaxis’ four categories&lt;/strong&gt;—tutorials, how-to guides, explanations, and references&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Define which team members will be responsible for each type of documentation&lt;/strong&gt;, whether you have dedicated technical writers, product developers, or a mix of contributors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a set of templates and guidelines for each category to ensure consistency&lt;/strong&gt;. For example, tutorials might include a step-by-step format and specific prerequisites, while how-to guides should be goal-oriented and solution-focused. This helps your documentation team maintain a cohesive style across all types of content, making it easier to understand and navigate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrate Diátaxis-specific labels or sections in your documentation tool,&lt;/strong&gt; like Confluence or &lt;a href=&#34;https://www.gitbook.com/&#34;&gt;GitBook&lt;/a&gt;. This way, each type of content is visually distinguishable, and users can quickly navigate to the section they need. Additionally, implement regular documentation audits to keep content updated. For instance, assign quarterly reviews for each category to ensure tutorials, how-tos, and explanations stay relevant, and reference materials remain accurate.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By creating a structured workflow around Diátaxis, you empower your teams to collaborate effectively on documentation, providing end-users with a seamless experience. This approach not only reduces onboarding time for new employees and customers but also allows for documentation that evolves as your product and user needs change, without compromising on clarity or usability.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
