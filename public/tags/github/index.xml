<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on PrecisionDocs</title>
    <link>/tags/github/</link>
    <description>PrecisionDocs (Github)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    

    
    <lastBuildDate>Mon, 30 Sep 2024 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Build and Deploy a Blog with Hugo, Github and Netlify</title>
      <link>/precisiondocs/how-to-build-and-deploy-a-blog-with-hugo-github-and-netlify/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/precisiondocs/how-to-build-and-deploy-a-blog-with-hugo-github-and-netlify/</guid>
      <description>&lt;h2 id=&#34;introduction-deploying-a--static-site&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#introduction-deploying-a--static-site&#34;&gt;
        #
    &lt;/a&gt;
    Introduction: Deploying a  Static Site
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Static site generation is a very popular solution in today&amp;rsquo;s publishing environments, especially for technical documentation. The available frameworks are solid and easy to use, and the resulting website is blazing fast with no hiccups and zero render time. If you add Github to the workflow as a storage solution, and Netlify as deployment framework, you have a perfect solution to a fast and clean publishing process.
In this article, I&amp;rsquo;ll describe all the steps I&amp;rsquo;ve taken to bring Precisiondocs online&lt;/p&gt;
&lt;h2 id=&#34;framework-hugo&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#framework-hugo&#34;&gt;
        #
    &lt;/a&gt;
    Framework: Hugo
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;As static site generator, I went for &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. It&amp;rsquo;s a solid framework, with good themes, and it&amp;rsquo;s based on markdown files organized in a simple file system. To install the Hugo framework, you need to start by setting up Hugo on your machine. You can install Hugo via a package manager or download it directly&lt;/p&gt;
&lt;p&gt;Here is a step-by-step guide to installing the Hugo framework, creating a new website, and installing the &lt;a href=&#34;https://github.com/Junyi-99/hugo-theme-anubis2&#34;&gt;Anubis2 theme&lt;/a&gt;, the one I chose for this website.&lt;/p&gt;
&lt;h3 id=&#34;step-1-install-hugo&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-1-install-hugo&#34;&gt;
        ##
    &lt;/a&gt;
    Step 1: Install Hugo
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;For &lt;strong&gt;macOS&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For &lt;strong&gt;Linux&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For &lt;strong&gt;Windows&lt;/strong&gt;:
Download the binary from the &lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;Hugo GitHub releases&lt;/a&gt; and add it to your PATH.&lt;/p&gt;
&lt;p&gt;Once Hugo is installed, check if itâ€™s working correctly by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-2-create-a-new-website&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-2-create-a-new-website&#34;&gt;
        ##
    &lt;/a&gt;
    Step 2: Create a New Website
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Now that you installed Hugo, you need to create a new Hugo site by running the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site my-website
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will create a new folder &lt;code&gt;my-website&lt;/code&gt; with the necessary Hugo folder structure.
At this point, you may want to move into the newly created website folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cd&lt;/span&gt; my-website
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-3-install-the-anubis2-theme&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-3-install-the-anubis2-theme&#34;&gt;
        ##
    &lt;/a&gt;
    Step 3: Install the Anubis2 Theme
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;In any Hugo installation you will need to add a &lt;em&gt;theme&lt;/em&gt; to provide a layout and a presentation layer  to your content. In my case I chose Anubis2. You can install this theme (as any other) using Git. Run the following command to add it as a submodule:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add https://github.com/Mitrichius/hugo-theme-anubis.git themes/anubis2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that the theme is installed, you will need to let Hugo know. Look in the root for a file called &lt;code&gt;config.toml&lt;/code&gt; file and add the following line to specify the Anubis2 theme:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;theme = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;anubis2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you&amp;rsquo; re ready to launch the website using this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will make your site available at &lt;code&gt;http://localhost:1313&lt;/code&gt;. Hugo will automatically rebuild&lt;/p&gt;
&lt;h2 id=&#34;repository-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#repository-github&#34;&gt;
        #
    &lt;/a&gt;
    Repository: Github
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Once your site is ready, you may want to create a repository on &lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt; and put your website in it. This way you&amp;rsquo;ll be able to easily push updates online, and - as we&amp;rsquo;ll see - deploy the content.
First of all, you will create a repository on Github from your profile page, giving it a name of your choice and deciding for it to be &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt;. Then you&amp;rsquo;ll go back to your terminal and initialize &lt;code&gt;git&lt;/code&gt; using the commands provided from Github to connect your local repo to the online counterpart.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin https://github.com/biccio/prova.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you&amp;rsquo;re all set! Let&amp;rsquo;s go to deployment!&lt;/p&gt;
&lt;h2 id=&#34;deployment-netlify&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#deployment-netlify&#34;&gt;
        #
    &lt;/a&gt;
    Deployment: Netlify
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Netlify is a great solution to deploy a website from a variety of framework, providing a great interface to manage multiple websites and their build and deployment. Netlify offers a free starter package with &lt;strong&gt;100 GB of bandwidth&lt;/strong&gt;, &lt;strong&gt;300 build per minutes&lt;/strong&gt; for a single member seat.
The easiest way to create and manage a new website is &lt;em&gt;importing a new project&lt;/em&gt; (other options are: &lt;em&gt;manually uploading your files&lt;/em&gt; or &lt;em&gt;starting from a template&lt;/em&gt;, a great solution if you need to start from scratch with backend and frontend).&lt;/p&gt;
&lt;h3 id=&#34;step-1---create-a-new-website-importing-a-project&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-1---create-a-new-website-importing-a-project&#34;&gt;
        ##
    &lt;/a&gt;
    Step 1 - Create a new website importing a project
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Assuming that you followed the previous steps, now you should have your content and framework stored in a repository on Github.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a new site&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select &lt;strong&gt;Add new site&lt;/strong&gt; â†’ &lt;strong&gt;Import an existing project&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Github&lt;/strong&gt; and authenticate (or you may be already logged in)&lt;/li&gt;
&lt;li&gt;Choose the repo where you stored your content&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Review your configuration&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choose a name for your new website&lt;/li&gt;
&lt;li&gt;Choose your branch (usually &lt;code&gt;main&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Leave blank &lt;em&gt;Base directory&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Write &lt;code&gt;hugo&lt;/code&gt; as &lt;em&gt;Build Command&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt; as &lt;em&gt;Publish Directory&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Leave default in &lt;em&gt;Functions Directory&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;important&lt;/strong&gt;: add &lt;em&gt;Hugo version&lt;/em&gt; as &lt;em&gt;environmental variable&lt;/em&gt;: key: &lt;code&gt;HUGO_VERSION&lt;/code&gt; / value: &lt;code&gt;X.X.X&lt;/code&gt; (you may find your hugo version with the terminal command &lt;code&gt;hugo version&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-2---deploy-the-website&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-2---deploy-the-website&#34;&gt;
        ##
    &lt;/a&gt;
    Step 2 - Deploy the website
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Now you&amp;rsquo;re ready to deploy, push the button and the magic will happen! Note that Netlify will choose for you a temporary subdomain: you&amp;rsquo;ll be able to change it, or even set up a custom domain. If everything is ok, you&amp;rsquo;ll be able to browse your new website in a couple of minutes!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>How to use Obsidian and Github to Organize and Maintain your Tech Documentation</title>
      <link>/precisiondocs/how-to-use-obsidian-and-github-to-organize-and-maintain-your-tech-document/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/precisiondocs/how-to-use-obsidian-and-github-to-organize-and-maintain-your-tech-document/</guid>
      <description>&lt;h2 id=&#34;introduction-managing-information-effectively&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#introduction-managing-information-effectively&#34;&gt;
        #
    &lt;/a&gt;
    Introduction: Managing Information Effectively
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;In todayâ€™s fast-paced technical environments, clear and well-organized documentation is key to ensuring smooth workflows and successful collaboration. Whether youâ€™re working on API documentation, software architecture overviews, or development processes, managing this information effectively is essential. Two tools that offer a powerful solution for handling technical documentation are &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt; and &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;. Together, they provide an efficient system for writing, organizing, and sharing technical documents.&lt;/p&gt;
&lt;p&gt;In this article, weâ€™ll explore how to use Obsidianâ€™s note-taking capabilities in combination with GitHubâ€™s version control and collaborative features to streamline your technical documentation workflow.&lt;/p&gt;
&lt;h2 id=&#34;obsidian-and-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#obsidian-and-github&#34;&gt;
        #
    &lt;/a&gt;
    Obsidian and GitHub
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Github is the most important git platform for code storage, continuous integration and version control, and it&amp;rsquo;s also widely-used for tech documentation storage and collaborative editing, usually in addition with static site generators like &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, &lt;a href=&#34;https://docusaurus.io/&#34;&gt;Docusaurus&lt;/a&gt;. Obsidian is one of the best markdown editor around, with a great and very usable WYSIWYG interface, and some cool plugins that makes it the perfect all-in-one platform to manage tech documentation content. But how can we make the two tool work together?&lt;/p&gt;
&lt;h2 id=&#34;setting-up-obsidian-for-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#setting-up-obsidian-for-documentation&#34;&gt;
        #
    &lt;/a&gt;
    Setting Up Obsidian for Documentation
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;First of all you&amp;rsquo;ll want to set up your workspace. After downloading and installing &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;, you will create a dedicated vault for your documentation, and you&amp;rsquo;ll start writing your documentation files. In terms of formatting, Obsidian supports markdown, so you can include headings, subheadings, code snippets, tables, and other essential elements for technical documentation. Tagging is another useful feature in Obsidian, allowing you to categorize your notes and easily find related content. By using &lt;strong&gt;metadata and tags&lt;/strong&gt;, you can add context to your documentation and ensure it is well-organized.&lt;/p&gt;
&lt;h2 id=&#34;integrating-obsidian-with-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#integrating-obsidian-with-github&#34;&gt;
        #
    &lt;/a&gt;
    Integrating Obsidian with GitHub
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Once your documentation is set up in Obsidian, the next step is to integrate it with GitHub to enable version control and collaboration. This process involves linking your Obsidian vault with a &lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/create-a-repo&#34;&gt;GitHub repository&lt;/a&gt;. If you havenâ€™t already, &lt;a href=&#34;https://github.com/new&#34;&gt;create a repository on GitHub&lt;/a&gt; specifically for your documentation.
Then, to link Obsidian with GitHub, you will use your terminal.&lt;/p&gt;
&lt;p&gt;Go to the folder where your Obsidian Vault is stored and use this command to initialize your local repo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, prepare and commit your files, add the Github repository as origin for your local one, and push to the main branch of the repository the content you created with Obsidian&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin https://github.com/your_user/your_repo.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now your local Obsidian Vault is connected to your Github repository.&lt;/p&gt;
&lt;h2 id=&#34;continuous-integration-within-obsidian&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#continuous-integration-within-obsidian&#34;&gt;
        #
    &lt;/a&gt;
    Continuous integration within Obsidian
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Now that your local and remote repos are aligned, how will you update your newly edited content directly within Obsidian? You can add to Obsidian a &lt;a href=&#34;https://github.com/Vinzent03/obsidian-git&#34;&gt;Git plugin&lt;/a&gt;, to make it very easy to update your content without using your terminal.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to menu &lt;strong&gt;Obsidian&lt;/strong&gt; â†’ &lt;strong&gt;Preferences&lt;/strong&gt; â†’ &lt;strong&gt;Community&lt;/strong&gt; plugin and turn them on (they&amp;rsquo;re off by default).&lt;/li&gt;
&lt;li&gt;Search &amp;ldquo;Git&amp;rdquo; in the plugin repository.&lt;/li&gt;
&lt;li&gt;Install and enable the plugin.&lt;/li&gt;
&lt;li&gt;You will notice a Git icon on the left hand sidebar. Press that button and on the right hand side of the interface you will notice the Git panel, with &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt; commands ready to be used within Obsidian.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You&amp;rsquo;ll now ready to use Obsidian to edit your documentation content in a visual environment, with easy collaborative storage on Github&lt;/p&gt;
&lt;h2 id=&#34;publish-your-content&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#publish-your-content&#34;&gt;
        #
    &lt;/a&gt;
    Publish your Content
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;If you have your files on Github and you need to publish them in an easy way, you may want to choose &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;. &lt;a href=&#34;https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site&#34;&gt;Here&amp;rsquo;s a tutorial&lt;/a&gt; that will easily guide you through all the steps needed.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
