<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Precisiondocs on PrecisionDocs</title>
    <link>/precisiondocs/</link>
    <description>PrecisionDocs (Precisiondocs)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    

    
    <lastBuildDate>Mon, 30 Sep 2024 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="/precisiondocs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Build and Deploy a Blog with Hugo, Github and Netlify</title>
      <link>/precisiondocs/how-to-build-and-deploy-a-blog-with-hugo-github-and-netlify/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/precisiondocs/how-to-build-and-deploy-a-blog-with-hugo-github-and-netlify/</guid>
      <description>&lt;h2 id=&#34;introduction&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        #
    &lt;/a&gt;
    Introduction
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Static site generation is a very popular solution in today&amp;rsquo;s publishing environments, especially for technical documentation. The available frameworks are solid and easy to use, and the resulting website is blazing fast with no hiccups and zero render time. If you add Github to the workflow as a storage solution, and Netlify as deployment framework, you have a perfect solution to a fast and clean publishing process.
In this article, I&amp;rsquo;ll describe all the steps I&amp;rsquo;ve taken to bring Precisiondocs online, and how I maintain the content in my publishing process.&lt;/p&gt;
&lt;h2 id=&#34;framework-hugo&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#framework-hugo&#34;&gt;
        #
    &lt;/a&gt;
    Framework: Hugo
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;As static site generator, I went for &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. It&amp;rsquo;s a solid framework, with good themes, and it&amp;rsquo;s based on markdown files organized in a simple file system. To install the Hugo framework, you need to start by setting up Hugo on your machine. You can install Hugo via a package manager or download it directly&lt;/p&gt;
&lt;p&gt;Here is a step-by-step guide to installing the Hugo framework, creating a new website, and installing the &lt;a href=&#34;https://github.com/Junyi-99/hugo-theme-anubis2&#34;&gt;Anubis2 theme&lt;/a&gt;, the one I chose for this website.&lt;/p&gt;
&lt;h3 id=&#34;step-1-install-hugo&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-1-install-hugo&#34;&gt;
        ##
    &lt;/a&gt;
    Step 1: Install Hugo
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;For &lt;strong&gt;macOS&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For &lt;strong&gt;Linux&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For &lt;strong&gt;Windows&lt;/strong&gt;:
Download the binary from the &lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;Hugo GitHub releases&lt;/a&gt; and add it to your PATH.&lt;/p&gt;
&lt;p&gt;Once Hugo is installed, check if itâ€™s working correctly by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-2-create-a-new-website&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-2-create-a-new-website&#34;&gt;
        ##
    &lt;/a&gt;
    Step 2: Create a New Website
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Now that you installed Hugo, you need to create a new Hugo site by running the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site my-website
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will create a new folder &lt;code&gt;my-website&lt;/code&gt; with the necessary Hugo folder structure.
At this point, you may want to move into the newly created website folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cd&lt;/span&gt; my-website
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-3-install-the-anubis2-theme&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-3-install-the-anubis2-theme&#34;&gt;
        ##
    &lt;/a&gt;
    Step 3: Install the Anubis2 Theme
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;In any Hugo installation you will need to add a &lt;em&gt;theme&lt;/em&gt; to provide a layout and a presentation layer  to your content. In my case I chose Anubis2. You can install this theme (as any other) using Git. Run the following command to add it as a submodule:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add https://github.com/Mitrichius/hugo-theme-anubis.git themes/anubis2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that the theme is installed, you will need to let Hugo know. Look in the root for a file called &lt;code&gt;config.toml&lt;/code&gt; file and add the following line to specify the Anubis2 theme:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;theme = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;anubis2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you&amp;rsquo; re ready to launch the website using this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will make your site available at &lt;code&gt;http://localhost:1313&lt;/code&gt;. Hugo will automatically rebuild&lt;/p&gt;
&lt;h2 id=&#34;repository-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#repository-github&#34;&gt;
        #
    &lt;/a&gt;
    Repository: Github
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Once your site is ready, you may want to create a repository on &lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt; and put your website in it. This way you&amp;rsquo;ll be able to easily push updates online, and - as we&amp;rsquo;ll see - deploy the content.
First of all, you will create a repository on Github from your profile page, giving it a name of your choice and deciding for it to be &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt;. Then you&amp;rsquo;ll go back to your terminal and initialize &lt;code&gt;git&lt;/code&gt; using the commands provided from Github to connect your local repo to the online counterpart.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin https://github.com/biccio/prova.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you&amp;rsquo;re all set! Let&amp;rsquo;s go to deployment!&lt;/p&gt;
&lt;h2 id=&#34;deployment-netlify&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#deployment-netlify&#34;&gt;
        #
    &lt;/a&gt;
    Deployment: Netlify
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Netlify is a great solution to deploy a website from a variety of framework, providing a great interface to manage multiple websites and their build and deployment. Netlify offers a free starter package with &lt;strong&gt;100 GB of bandwidth&lt;/strong&gt;, &lt;strong&gt;300 build per minutes&lt;/strong&gt; for a single member seat.
The easiest way to create and manage a new website is &lt;em&gt;importing a new project&lt;/em&gt; (other options are: &lt;em&gt;manually uploading your files&lt;/em&gt; or &lt;em&gt;starting from a template&lt;/em&gt;, a great solution if you need to start from scratch with backend and frontend).&lt;/p&gt;
&lt;h3 id=&#34;step-1---create-a-new-website-importing-a-project&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-1---create-a-new-website-importing-a-project&#34;&gt;
        ##
    &lt;/a&gt;
    Step 1 - Create a new website importing a project
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Assuming that you followed the previous steps, now you should have your content and framework stored in a repository on Github.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a new site&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select &lt;strong&gt;Add new site&lt;/strong&gt; â†’ &lt;strong&gt;Import an existing project&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Github&lt;/strong&gt; and authenticate (or you may be already logged in)&lt;/li&gt;
&lt;li&gt;Choose the repo where you stored your content&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Review your configuration&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choose a name for your new website&lt;/li&gt;
&lt;li&gt;Choose your branch (usually &lt;code&gt;main&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Leave blank &lt;em&gt;Base directory&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Write &lt;code&gt;hugo&lt;/code&gt; as &lt;em&gt;Build Command&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt; as &lt;em&gt;Publish Directory&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Leave default in &lt;em&gt;Functions Directory&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;important&lt;/strong&gt;: add &lt;em&gt;Hugo version&lt;/em&gt; as &lt;em&gt;environmental variable&lt;/em&gt;: key: &lt;code&gt;HUGO_VERSION&lt;/code&gt; / value: &lt;code&gt;X.X.X&lt;/code&gt; (you may find your hugo version with the terminal command &lt;code&gt;hugo version&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-2---deploy-the-website&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#step-2---deploy-the-website&#34;&gt;
        ##
    &lt;/a&gt;
    Step 2 - Deploy the website
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Now you&amp;rsquo;re ready to deploy, push the button and the magic will happen! Note that Netlify will choose for you a temporary subdomain: you&amp;rsquo;ll be able to change it, or even set up a custom domain. If everything is ok, you&amp;rsquo;ll be able to browse your new website in a couple of minutes!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>How to use Obsidian and Github to Organize and Maintain your Tech Documentation</title>
      <link>/precisiondocs/how-to-use-obsidian-and-github-to-organize-and-maintain-your-tech-document/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/precisiondocs/how-to-use-obsidian-and-github-to-organize-and-maintain-your-tech-document/</guid>
      <description>&lt;h2 id=&#34;introduction&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        #
    &lt;/a&gt;
    Introduction
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;In todayâ€™s fast-paced technical environments, clear and well-organized documentation is key to ensuring smooth workflows and successful collaboration. Whether youâ€™re working on API documentation, software architecture overviews, or development processes, managing this information effectively is essential. Two tools that offer a powerful solution for handling technical documentation are &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt; and &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;. Together, they provide an efficient system for writing, organizing, and sharing technical documents.&lt;/p&gt;
&lt;p&gt;In this article, weâ€™ll explore how to use Obsidianâ€™s note-taking capabilities in combination with GitHubâ€™s version control and collaborative features to streamline your technical documentation workflow.&lt;/p&gt;
&lt;h2 id=&#34;why-obsidian-and-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#why-obsidian-and-github&#34;&gt;
        #
    &lt;/a&gt;
    Why Obsidian and GitHub?
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Github is a well known go-to tool for code storage, continuous integration and version control, and it&amp;rsquo;s also widely-used for tech documentation storage and collaborative editing, usually in addition with static site generators like &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, &lt;a href=&#34;https://docusaurus.io/&#34;&gt;Docusaurus&lt;/a&gt;. Obsidian is one of the best markdown editor around, with a great and very usable WYSIWYG interface, and some cool plugins that makes it the perfect all-in-one platform to manage tech documentation content. But how can we make the two tool work together?&lt;/p&gt;
&lt;h2 id=&#34;setting-up-obsidian-for-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#setting-up-obsidian-for-documentation&#34;&gt;
        #
    &lt;/a&gt;
    Setting Up Obsidian for Documentation
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;First of all you&amp;rsquo;ll want to set up your workspace. After downloading and installing &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;, you will create a dedicated vault for your documentation, and you&amp;rsquo;ll start writing your documentation files. In terms of formatting, Obsidian supports markdown, so you can include headings, subheadings, code snippets, tables, and other essential elements for technical documentation. Tagging is another useful feature in Obsidian, allowing you to categorize your notes and easily find related content. By using &lt;strong&gt;metadata and tags&lt;/strong&gt;, you can add context to your documentation and ensure it is well-organized.&lt;/p&gt;
&lt;h2 id=&#34;integrating-obsidian-with-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#integrating-obsidian-with-github&#34;&gt;
        #
    &lt;/a&gt;
    Integrating Obsidian with GitHub
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Once your documentation is set up in Obsidian, the next step is to integrate it with GitHub to enable version control and collaboration. This process involves linking your Obsidian vault with a &lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/create-a-repo&#34;&gt;GitHub repository&lt;/a&gt;. If you havenâ€™t already, &lt;a href=&#34;https://github.com/new&#34;&gt;create a repository on GitHub&lt;/a&gt; specifically for your documentation.
Then, to link Obsidian with GitHub, you will use your terminal.&lt;/p&gt;
&lt;p&gt;Go to the folder where your Obsidian Vault is stored and use this command to initialize your local repo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, prepare and commit your files, add the Github repository as origin for your local one, and push to the main branch of the repository the content you created with Obsidian&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin https://github.com/your_user/your_repo.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now your local Obsidian Vault is connected to your Github repository.&lt;/p&gt;
&lt;h2 id=&#34;continuous-integration-within-obsidian&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#continuous-integration-within-obsidian&#34;&gt;
        #
    &lt;/a&gt;
    Continuous integration within Obsidian
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Now that your local and remote repos are aligned, how will you update your newly edited content directly within Obsidian? You can add to Obsidian a &lt;a href=&#34;https://github.com/Vinzent03/obsidian-git&#34;&gt;Git plugin&lt;/a&gt;, to make it very easy to update your content without using your terminal.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to menu &lt;strong&gt;Obsidian&lt;/strong&gt; â†’ &lt;strong&gt;Preferences&lt;/strong&gt; â†’ &lt;strong&gt;Community&lt;/strong&gt; plugin and turn them on (they&amp;rsquo;re off by default).&lt;/li&gt;
&lt;li&gt;Search &amp;ldquo;Git&amp;rdquo; in the plugin repository.&lt;/li&gt;
&lt;li&gt;Install and enable the plugin.&lt;/li&gt;
&lt;li&gt;You will notice a Git icon on the left hand sidebar. Press that button and on the right hand side of the interface you will notice the Git panel, with &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt; commands ready to be used within Obsidian.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You&amp;rsquo;ll now ready to use Obsidian to edit your documentation content in a visual environment, with easy collaborative storage on Github&lt;/p&gt;
&lt;h2 id=&#34;publish-your-content&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#publish-your-content&#34;&gt;
        #
    &lt;/a&gt;
    Publish your content
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;If you have your files on Github and you need to publish them in an easy way, you may want to choose &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;. &lt;a href=&#34;https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site&#34;&gt;Here&amp;rsquo;s a tutorial&lt;/a&gt; that will easily guide you through all the steps needed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Pros and Cons of Embedding Documentation in Code</title>
      <link>/precisiondocs/the-pros-and-cons-of-embedding-technical-documentation-inside-the-codebase/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/precisiondocs/the-pros-and-cons-of-embedding-technical-documentation-inside-the-codebase/</guid>
      <description>&lt;h2 id=&#34;introduction&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        #
    &lt;/a&gt;
    Introduction
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Usually, technical documentation is built separated from the codebase, but sometimes this choice can prove to be useful, having the two worlds evolve together. In this case, technical documentation will be included inside the codebase in form of comments, markdown files, or autogenerated docs based on code annotations. Each choice has its own pros and cons, and we&amp;rsquo;re going to analyze them and discuss the best solution for different use cases.&lt;/p&gt;
&lt;h3 id=&#34;why-embed-documentation-in-the-code&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#why-embed-documentation-in-the-code&#34;&gt;
        ##
    &lt;/a&gt;
    Why embed documentation in the code?
&lt;/div&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;documentation-close-to-code&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#documentation-close-to-code&#34;&gt;
        ###
    &lt;/a&gt;
    Documentation Close to Code
&lt;/div&gt;
&lt;/h4&gt;
&lt;p&gt;Of course one of the main benefits of having the tech documentation inside the codebase is proximity. Developers may make use of documentation while coding or reviewing code directly from the source. The key here is &lt;em&gt;context&lt;/em&gt;: the code is commented right where it works, as inline comments, docstrings, or markdown files, and this helps better understand the ratio behind architectural decisions.&lt;/p&gt;
&lt;h4 id=&#34;suggests-regular-updates&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#suggests-regular-updates&#34;&gt;
        ###
    &lt;/a&gt;
    Suggests regular updates
&lt;/div&gt;
&lt;/h4&gt;
&lt;p&gt;Because the documentation is stored alongside the code, developers are more likely to update it as the codebase evolves. This decreases the likelihood of the documentation being out of current, as developers often work in the same environment as the documentation. Automated tools such as &lt;strong&gt;Javadoc&lt;/strong&gt; for Java and &lt;strong&gt;Sphinx&lt;/strong&gt; for Python can also help ensure that code changes result in documentation updates.###&lt;/p&gt;
&lt;h4 id=&#34;version-control-for-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#version-control-for-documentation&#34;&gt;
        ###
    &lt;/a&gt;
    Version Control for Documentation
&lt;/div&gt;
&lt;/h4&gt;
&lt;p&gt;When documentation is part of the codebase, it benefits from version control systems like Git. This means that any changes to the documentation are tracked, just like code changes. If a feature is added, deprecated, or updated, the associated documentation can be versioned alongside it. Having this level of traceability allows teams to easily review and roll back documentation to previous states if needed.&lt;/p&gt;
&lt;h4 id=&#34;reduced-documentation-drift&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#reduced-documentation-drift&#34;&gt;
        ###
    &lt;/a&gt;
    Reduced Documentation Drift
&lt;/div&gt;
&lt;/h4&gt;
&lt;p&gt;Documentation drift is a common uneasy scenario in which the code and its documentation doesn&amp;rsquo;t evolve in sync, leading to confusion and inconsistency.By embedding documentation directly in the code, you help mitigate this issue. Since developers are actively working on the code and can see the embedded documentation, there is less of a gap between what the code does and what the documentation says it does.&lt;/p&gt;
&lt;h4 id=&#34;code-driven-documentation-generation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#code-driven-documentation-generation&#34;&gt;
        ###
    &lt;/a&gt;
    Code-Driven Documentation Generation
&lt;/div&gt;
&lt;/h4&gt;
&lt;p&gt;Tools like &lt;strong&gt;Doxygen&lt;/strong&gt;, &lt;strong&gt;Sphinx&lt;/strong&gt;, and &lt;strong&gt;JSDoc&lt;/strong&gt; can automatically generate comprehensive documentation websites directly from annotated code. This reduces the manual effort required to maintain external documentation and ensures that the latest version of the docs is always aligned with the latest codebase. These tools can generate everything from API documentation to complex diagrams, saving valuable time for developers.&lt;/p&gt;
&lt;h2 id=&#34;why-its-not-great&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#why-its-not-great&#34;&gt;
        #
    &lt;/a&gt;
    Why it&amp;rsquo;s not great
&lt;/div&gt;
&lt;/h2&gt;
&lt;h4 id=&#34;overloading-the-codebase&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#overloading-the-codebase&#34;&gt;
        ###
    &lt;/a&gt;
    Overloading the Codebase
&lt;/div&gt;
&lt;/h4&gt;
&lt;p&gt;While embedding documentation in the codebase makes it easier to access, it can also clutter the code. Excessive inline comments or long docstrings can make the code harder to read. When developers focus on the logic, too much documentation can become noise, distracting from the main purpose of reading the code. In addition, markdown files and related documents can bloat the repository, making it harder to navigate, especially in large codebases.&lt;/p&gt;
&lt;h4 id=&#34;limited-scope&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#limited-scope&#34;&gt;
        ###
    &lt;/a&gt;
    Limited Scope
&lt;/div&gt;
&lt;/h4&gt;
&lt;p&gt;Embedded documentation typically focuses on implementation details, such as how specific functions or modules work. However, broader technical documentation, such as architecture overviews, user guides, or high-level design discussions, is more challenging to embed effectively in code. These types of documentation often require context that spans multiple parts of a system or involves strategic decisions, which are better suited for external, centralized documentation systems like &lt;strong&gt;Confluence&lt;/strong&gt;, &lt;strong&gt;Notion&lt;/strong&gt;, or &lt;strong&gt;GitHub Wikis&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;maintaining-clarity-and-structure&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#maintaining-clarity-and-structure&#34;&gt;
        ###
    &lt;/a&gt;
    Maintaining Clarity and Structure
&lt;/div&gt;
&lt;/h4&gt;
&lt;p&gt;While embedded documentation can provide helpful context, maintaining clarity is critical. Thereâ€™s a fine line between useful comments and documentation that overwhelms the reader. Developers may not always have the time or inclination to write clear, structured documentation directly in the code. Poorly written or disorganized documentation can be as harmful as having no documentation at all. Additionally, not every developer has the skill to write documentation that is both technically accurate and easy to understand.&lt;/p&gt;
&lt;h4 id=&#34;lack-of-a-centralized-view&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#lack-of-a-centralized-view&#34;&gt;
        ###
    &lt;/a&gt;
    Lack of a Centralized View
&lt;/div&gt;
&lt;/h4&gt;
&lt;p&gt;When documentation is scattered throughout the codebase, it can be difficult to get a high-level, centralized view of the system. Developers often need to jump from file to file, gathering information piecemeal, which can make understanding the system as a whole more difficult. For teams and stakeholders who are not directly involved in coding but still need to understand the project, navigating through code comments or inline docs may not be practical.&lt;/p&gt;
&lt;h4 id=&#34;documentation-fatigue&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#documentation-fatigue&#34;&gt;
        ###
    &lt;/a&gt;
    Documentation Fatigue
&lt;/div&gt;
&lt;/h4&gt;
&lt;p&gt;Thereâ€™s a risk that embedding documentation too closely with code will lead to documentation fatigue. Developers may feel burdened by the expectation to continuously document their code while coding, which could lead to superficial or incomplete documentation. Over time, this could result in under-documentation or documentation that is inaccurate due to being rushed or deprioritized.&lt;/p&gt;
&lt;h2 id=&#34;openapi-bridging-the-gap&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#openapi-bridging-the-gap&#34;&gt;
        #
    &lt;/a&gt;
    OpenAPI: Bridging the Gap
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;OpenAPI, formerly known as Swagger, provides a machine-readable way to define APIs. The OpenAPI specification standardizes how APIs are described, focusing on endpoints, request/response formats, authentication methods, and more. What makes OpenAPI a powerful solution in the context of the documentation dilemma is that it serves as a dynamic link between the code and external documentationâ€”offering the best of both worlds.&lt;/p&gt;
&lt;h3 id=&#34;key-benefits-of-openapi-in-addressing-the-dilemma&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#key-benefits-of-openapi-in-addressing-the-dilemma&#34;&gt;
        ##
    &lt;/a&gt;
    Key Benefits of OpenAPI in Addressing the Dilemma
&lt;/div&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automatic Generation of Documentation&lt;/strong&gt;: OpenAPI allows developers to define their APIs in a YAML or JSON format, and from this single source of truth, comprehensive documentation can be generated. This ensures that documentation remains consistent with the code without manual intervention. Tools like Swagger UI or Redoc can automatically convert an OpenAPI specification into interactive and user-friendly documentation, minimizing the risk of divergence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clear Separation of Concerns&lt;/strong&gt;: While OpenAPI files live alongside the code, they do not clutter the actual source code. This ensures that the code remains clean while providing all the necessary details about the API structure in an organized way. Developers can focus on writing code, while tools can handle the heavy lifting of turning these API specifications into rich documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved Collaboration&lt;/strong&gt;: OpenAPI files are written in easily understandable formats (YAML/JSON) that can be edited by both developers and non-developers alike. This makes it easier for different stakeholders, including product managers and technical writers, to contribute to or modify the documentation without needing to directly interact with the codebase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enforced Consistency&lt;/strong&gt;: One of the biggest advantages of using OpenAPI is that it enforces consistency. If the API evolves, the specification file can be updated accordingly, and the documentation is automatically updated to reflect those changes. This reduces the risk of having outdated or incomplete documentation and lowers maintenance overhead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Support for Code Annotations&lt;/strong&gt;: While OpenAPI provides external specifications, it can also integrate with in-code annotations using libraries like &lt;code&gt;Swagger annotations&lt;/code&gt; in Java or Spring. This allows for hybrid solutions where some level of documentation can still be embedded directly into the codebase, without compromising on structure or creating clutter. The annotations in the code can automatically populate the OpenAPI specification, which then generates comprehensive documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Integration with CI/CD Pipelines&lt;/strong&gt;: OpenAPI can be integrated into Continuous Integration/Continuous Deployment (CI/CD) pipelines, ensuring that the API documentation is generated and updated automatically as part of the development lifecycle. This means the API documentation is always current, and discrepancies between code and documentation can be flagged early in the development process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Why Diataxis Framework is A Game Changer for Organizing Technical Documentation</title>
      <link>/precisiondocs/why-diataxis-framework-is-a-game-changer-for-organizing-technical-documentation/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/precisiondocs/why-diataxis-framework-is-a-game-changer-for-organizing-technical-documentation/</guid>
      <description>&lt;h2 id=&#34;context&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#context&#34;&gt;
        #
    &lt;/a&gt;
    Context
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Effective technical documentation is critical to the success of any company, particularly in tech-driven environments where internal teams, partners, and customers rely on precise and accessible information. However, creating and managing high-quality documentation is no easy task. Itâ€™s common to end up with scattered, inconsistent, or overly complex content that makes it difficult for users to find what they need, when they need it.&lt;/p&gt;
&lt;p&gt;This is where the DiÃ¡taxis Framework comes in: a structured, modern approach to organizing technical documentation that not only streamlines your content but also enhances its usability. Whether you&amp;rsquo;re documenting for developers, end-users, or internal teams,&lt;/p&gt;
&lt;h2 id=&#34;what-is-the-diÃ¡taxis-framework&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#what-is-the-di%c3%a1taxis-framework&#34;&gt;
        #
    &lt;/a&gt;
    What is the DiÃ¡taxis Framework?
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;The DiÃ¡taxis Framework, developed by Daniele Procida, is a model that provides a clear, logical methodology that ensures everyone finds the right information easily, categorizing technical documentation into four distinct types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tutorials&lt;/strong&gt; â€“ Learning-oriented content that guides users through accomplishing a specific task. These are step-by-step instructions for beginners who are unfamiliar with your product or technology.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How-To Guides&lt;/strong&gt; â€“ Goal-oriented content that provides solutions for specific problems. These are practical guides that users can reference to quickly accomplish a particular goal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Explanations&lt;/strong&gt; â€“ Understanding-oriented content that dives deeper into the &amp;ldquo;why&amp;rdquo; of things. Itâ€™s designed to clarify complex concepts, providing background information and context to help users gain a solid understanding of how something works.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt; â€“ Information-oriented content that is structured for lookup. This includes API documentation, configuration settings, or any form of technical reference material.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The beauty of DiÃ¡taxis lies in its &lt;strong&gt;separation of these distinct documentation needs&lt;/strong&gt;. By organizing your content according to these four categories, users are better able to navigate and use your documentation, making easier for them to find out what they&amp;rsquo;re looking for.&lt;/p&gt;
&lt;h2 id=&#34;why-your-company-needs-diÃ¡taxis&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#why-your-company-needs-di%c3%a1taxis&#34;&gt;
        #
    &lt;/a&gt;
    Why Your Company Needs DiÃ¡taxis
&lt;/div&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;better-user-experience&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#better-user-experience&#34;&gt;
        ##
    &lt;/a&gt;
    Better User Experience
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Documentation is often created with good intentions but ends up being a patchwork of different types of information. This can be overwhelming for users who donâ€™t know where to start, or who need answers quickly.&lt;/p&gt;
&lt;p&gt;With DiÃ¡taxis, you structure content based on user intent. A beginner can go straight to tutorials without getting lost in complex explanations, while a seasoned developer can jump into reference material without having to wade through tutorials or conceptual information. This clear delineation creates a smooth and intuitive experience for users, which boosts efficiency and reduces the learning curve.&lt;/p&gt;
&lt;h3 id=&#34;improved-documentation-maintenance&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#improved-documentation-maintenance&#34;&gt;
        ##
    &lt;/a&gt;
    Improved Documentation Maintenance
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;As technical products evolve, so does the associated documentation. Without a clear organizational structure, documentation can quickly become outdated or inconsistent. The DiÃ¡taxis Framework introduces clarity and focus, making it easier for teams to manage, update, and expand the content.&lt;/p&gt;
&lt;p&gt;Each type of content (tutorials, how-tos, explanations, and references) serves a specific purpose, so it becomes simpler to identify what needs updating. Additionally, it prevents duplication of effort, as different types of content won&amp;rsquo;t overlap or contradict each other.&lt;/p&gt;
&lt;h3 id=&#34;tailored-to-different-learning-styles&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#tailored-to-different-learning-styles&#34;&gt;
        ##
    &lt;/a&gt;
    Tailored to Different Learning Styles
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;People learn differently. Some prefer hands-on approaches (tutorials), while others want to read detailed explanations (conceptual content). The DiÃ¡taxis Framework recognizes this and provides content for every learning style, ensuring that you cater to a diverse audience.&lt;/p&gt;
&lt;p&gt;By breaking up the documentation into these four categories, you give users the freedom to choose the learning path that works best for them. This also reduces friction and frustration, as users won&amp;rsquo;t need to sift through irrelevant information to get to the content they need.&lt;/p&gt;
&lt;h3 id=&#34;enhanced-onboarding-for-new-users-and-developers&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#enhanced-onboarding-for-new-users-and-developers&#34;&gt;
        ##
    &lt;/a&gt;
    Enhanced Onboarding for New Users and Developers
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;One of the biggest challenges companies face is onboarding new employees or users of a product. Well-structured documentation plays a critical role in reducing onboarding time and ensuring that new team members get up to speed quickly.&lt;/p&gt;
&lt;p&gt;DiÃ¡taxis provides a clear roadmap: newcomers can start with tutorials for practical, hands-on experience, refer to how-to guides when tackling specific tasks, and consult explanations for deeper understanding. This structure enables a smoother onboarding process and provides a reliable resource as they grow more confident and independent.&lt;/p&gt;
&lt;h3 id=&#34;consistency-across-teams-and-departments&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#consistency-across-teams-and-departments&#34;&gt;
        ##
    &lt;/a&gt;
    Consistency Across Teams and Departments
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;If your company has multiple teams contributing to technical documentation, maintaining consistency in style, format, and tone can be a nightmare. The DiÃ¡taxis Framework creates a standardized approach for documentation creation, regardless of the contributor&amp;rsquo;s technical expertise or writing style.&lt;/p&gt;
&lt;p&gt;Teams can adopt a consistent format for each type of content, ensuring that all documentation follows the same logical flow. This not only makes the documentation easier to use but also helps in managing it long-term, as everyone is working with the same structure in mind.&lt;/p&gt;
&lt;h2 id=&#34;implementing-diÃ¡taxis-in-your-company&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#implementing-di%c3%a1taxis-in-your-company&#34;&gt;
        #
    &lt;/a&gt;
    Implementing DiÃ¡taxis in Your Company
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Diataxis is easy to implementeverything but a Start by reviewing your existing documentation and identifying where it fits within the four categories. You can then reorganize the content according to the framework.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;ve adopted this approach, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create templates for each type of documentation to maintain consistency.&lt;/li&gt;
&lt;li&gt;Train teams on how to use the framework so that new content is created in line with DiÃ¡taxis principles.&lt;/li&gt;
&lt;li&gt;Continuously improve by gathering user feedback and adjusting your documentation structure to meet evolving needs.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
