<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on PrecisionDocs</title>
    <link>/posts/</link>
    <description>PrecisionDocs (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    

    
    <lastBuildDate>Mon, 30 Sep 2024 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Pros and Cons of Embedding Documentation in Code</title>
      <link>/posts/the-pros-and-cons-of-embedding-technical-documentation-inside-the-codebase/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/the-pros-and-cons-of-embedding-technical-documentation-inside-the-codebase/</guid>
      <description>&lt;h2 id=&#34;introduction&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        #
    &lt;/a&gt;
    Introduction.
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Usually, technical documentation is built separated from the codebase, but sometimes this choice can prove to be useful, having the two world evolve together. In this case, technical documentation will be included inside the codebase in form of comments, markdown files, or autogenerated docs based on code annotations. Each choice has its own pros and cons, and the purpose of this post is to analyze them and discuss the best solution for diverse use cases.&lt;/p&gt;
&lt;h2 id=&#34;pros&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#pros&#34;&gt;
        #
    &lt;/a&gt;
    Pros
&lt;/div&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;1-documentation-close-to-code&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#1-documentation-close-to-code&#34;&gt;
        ##
    &lt;/a&gt;
    1: &lt;strong&gt;Documentation Close to Code&lt;/strong&gt;
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Of course one of the main benefits of having the tech documentation inside the codebase is proximity. Developers may make use of documentation while coding or reviewing code directly from the source. The key here is &lt;em&gt;context&lt;/em&gt;: the code is commented right where it works, as inline comments, docstrings, or markdown files, and this helps better understand the ratio behind architectural decisions.&lt;/p&gt;
&lt;h3 id=&#34;2-suggests-regular-updates&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#2-suggests-regular-updates&#34;&gt;
        ##
    &lt;/a&gt;
    2. &lt;strong&gt;Suggests regular updates&lt;/strong&gt;
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Because the documentation is stored alongside the code, developers are more likely to update it as the codebase evolves. This decreases the likelihood of the documentation being out of current, as developers often work in the same environment as the documentation. Automated tools such as &lt;strong&gt;Javadoc&lt;/strong&gt; for Java and &lt;strong&gt;Sphinx&lt;/strong&gt; for Python can also help ensure that code changes result in documentation updates.###&lt;/p&gt;
&lt;h3 id=&#34;3-version-control-for-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#3-version-control-for-documentation&#34;&gt;
        ##
    &lt;/a&gt;
    3. &lt;strong&gt;Version Control for Documentation&lt;/strong&gt;
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;When documentation is part of the codebase, it benefits from version control systems like Git. This means that any changes to the documentation are tracked, just like code changes. If a feature is added, deprecated, or updated, the associated documentation can be versioned alongside it. Having this level of traceability allows teams to easily review and roll back documentation to previous states if needed.&lt;/p&gt;
&lt;h3 id=&#34;4-reduced-documentation-drift&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#4-reduced-documentation-drift&#34;&gt;
        ##
    &lt;/a&gt;
    4. &lt;strong&gt;Reduced Documentation Drift&lt;/strong&gt;
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Documentation drift is a common uneasy scenario in which the code and its documentation doesn&amp;rsquo;t evolve in sync, leading to confusion and inconsistency.&lt;/p&gt;
&lt;p&gt;refers to the scenario where the code and its documentation evolve independently, leading to inconsistencies. By embedding documentation directly in the code, you help mitigate this issue. Since developers are actively working on the code and can see the embedded documentation, there is less of a gap between what the code does and what the documentation says it does.&lt;/p&gt;
&lt;h3 id=&#34;5-code-driven-documentation-generation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#5-code-driven-documentation-generation&#34;&gt;
        ##
    &lt;/a&gt;
    5. &lt;strong&gt;Code-Driven Documentation Generation&lt;/strong&gt;
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Tools like &lt;strong&gt;Doxygen&lt;/strong&gt;, &lt;strong&gt;Sphinx&lt;/strong&gt;, and &lt;strong&gt;JSDoc&lt;/strong&gt; can automatically generate comprehensive documentation websites directly from annotated code. This reduces the manual effort required to maintain external documentation and ensures that the latest version of the docs is always aligned with the latest codebase. These tools can generate everything from API documentation to complex diagrams, saving valuable time for developers.&lt;/p&gt;
&lt;h2 id=&#34;the-cons&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#the-cons&#34;&gt;
        #
    &lt;/a&gt;
    The Cons
&lt;/div&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;1-overloading-the-codebase&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#1-overloading-the-codebase&#34;&gt;
        ##
    &lt;/a&gt;
    1. &lt;strong&gt;Overloading the Codebase&lt;/strong&gt;
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;While embedding documentation in the codebase makes it easier to access, it can also clutter the code. Excessive inline comments or long docstrings can make the code harder to read. When developers focus on the logic, too much documentation can become noise, distracting from the main purpose of reading the code. In addition, markdown files and related documents can bloat the repository, making it harder to navigate, especially in large codebases.&lt;/p&gt;
&lt;h3 id=&#34;2-limited-scope&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#2-limited-scope&#34;&gt;
        ##
    &lt;/a&gt;
    2. &lt;strong&gt;Limited Scope&lt;/strong&gt;
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Embedded documentation typically focuses on implementation details, such as how specific functions or modules work. However, broader technical documentation, such as architecture overviews, user guides, or high-level design discussions, is more challenging to embed effectively in code. These types of documentation often require context that spans multiple parts of a system or involves strategic decisions, which are better suited for external, centralized documentation systems like &lt;strong&gt;Confluence&lt;/strong&gt;, &lt;strong&gt;Notion&lt;/strong&gt;, or &lt;strong&gt;GitHub Wikis&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;3-maintaining-clarity-and-structure&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#3-maintaining-clarity-and-structure&#34;&gt;
        ##
    &lt;/a&gt;
    3. &lt;strong&gt;Maintaining Clarity and Structure&lt;/strong&gt;
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;While embedded documentation can provide helpful context, maintaining clarity is critical. There’s a fine line between useful comments and documentation that overwhelms the reader. Developers may not always have the time or inclination to write clear, structured documentation directly in the code. Poorly written or disorganized documentation can be as harmful as having no documentation at all. Additionally, not every developer has the skill to write documentation that is both technically accurate and easy to understand.&lt;/p&gt;
&lt;h3 id=&#34;4-lack-of-a-centralized-view&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#4-lack-of-a-centralized-view&#34;&gt;
        ##
    &lt;/a&gt;
    4. &lt;strong&gt;Lack of a Centralized View&lt;/strong&gt;
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;When documentation is scattered throughout the codebase, it can be difficult to get a high-level, centralized view of the system. Developers often need to jump from file to file, gathering information piecemeal, which can make understanding the system as a whole more difficult. For teams and stakeholders who are not directly involved in coding but still need to understand the project, navigating through code comments or inline docs may not be practical.&lt;/p&gt;
&lt;h3 id=&#34;5-documentation-fatigue&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#5-documentation-fatigue&#34;&gt;
        ##
    &lt;/a&gt;
    5. &lt;strong&gt;Documentation Fatigue&lt;/strong&gt;
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;There’s a risk that embedding documentation too closely with code will lead to documentation fatigue. Developers may feel burdened by the expectation to continuously document their code while coding, which could lead to superficial or incomplete documentation. Over time, this could result in under-documentation or documentation that is inaccurate due to being rushed or deprioritized.&lt;/p&gt;
&lt;h2 id=&#34;openapi-bridging-the-gap&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#openapi-bridging-the-gap&#34;&gt;
        #
    &lt;/a&gt;
    OpenAPI: Bridging the Gap
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;OpenAPI, formerly known as Swagger, provides a machine-readable way to define APIs. The OpenAPI specification standardizes how APIs are described, focusing on endpoints, request/response formats, authentication methods, and more. What makes OpenAPI a powerful solution in the context of the documentation dilemma is that it serves as a dynamic link between the code and external documentation—offering the best of both worlds.&lt;/p&gt;
&lt;h3 id=&#34;key-benefits-of-openapi-in-addressing-the-dilemma&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#key-benefits-of-openapi-in-addressing-the-dilemma&#34;&gt;
        ##
    &lt;/a&gt;
    Key Benefits of OpenAPI in Addressing the Dilemma
&lt;/div&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automatic Generation of Documentation&lt;/strong&gt;: OpenAPI allows developers to define their APIs in a YAML or JSON format, and from this single source of truth, comprehensive documentation can be generated. This ensures that documentation remains consistent with the code without manual intervention. Tools like Swagger UI or Redoc can automatically convert an OpenAPI specification into interactive and user-friendly documentation, minimizing the risk of divergence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clear Separation of Concerns&lt;/strong&gt;: While OpenAPI files live alongside the code, they do not clutter the actual source code. This ensures that the code remains clean while providing all the necessary details about the API structure in an organized way. Developers can focus on writing code, while tools can handle the heavy lifting of turning these API specifications into rich documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved Collaboration&lt;/strong&gt;: OpenAPI files are written in easily understandable formats (YAML/JSON) that can be edited by both developers and non-developers alike. This makes it easier for different stakeholders, including product managers and technical writers, to contribute to or modify the documentation without needing to directly interact with the codebase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enforced Consistency&lt;/strong&gt;: One of the biggest advantages of using OpenAPI is that it enforces consistency. If the API evolves, the specification file can be updated accordingly, and the documentation is automatically updated to reflect those changes. This reduces the risk of having outdated or incomplete documentation and lowers maintenance overhead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Support for Code Annotations&lt;/strong&gt;: While OpenAPI provides external specifications, it can also integrate with in-code annotations using libraries like &lt;code&gt;Swagger annotations&lt;/code&gt; in Java or Spring. This allows for hybrid solutions where some level of documentation can still be embedded directly into the codebase, without compromising on structure or creating clutter. The annotations in the code can automatically populate the OpenAPI specification, which then generates comprehensive documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Integration with CI/CD Pipelines&lt;/strong&gt;: OpenAPI can be integrated into Continuous Integration/Continuous Deployment (CI/CD) pipelines, ensuring that the API documentation is generated and updated automatically as part of the development lifecycle. This means the API documentation is always current, and discrepancies between code and documentation can be flagged early in the development process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>This blog: setup and routine process</title>
      <link>/posts/this-blog-setup-and-routine-process/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/this-blog-setup-and-routine-process/</guid>
      <description>&lt;h2 id=&#34;context&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#context&#34;&gt;
        #
    &lt;/a&gt;
    Context
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;In today’s fast-paced technical environments, clear and well-organized documentation is key to ensuring smooth workflows and successful collaboration. Whether you’re working on API documentation, software architecture overviews, or development processes, managing this information effectively is essential. Two tools that offer a powerful solution for handling technical documentation are &lt;strong&gt;&lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;&lt;/strong&gt;. Together, they provide an efficient system for writing, organizing, and sharing technical documents.&lt;/p&gt;
&lt;p&gt;In this article, we’ll explore how to use Obsidian’s note-taking capabilities in combination with GitHub’s version control and collaborative features to streamline your technical documentation workflow.&lt;/p&gt;
&lt;h2 id=&#34;why-obsidian-and-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#why-obsidian-and-github&#34;&gt;
        #
    &lt;/a&gt;
    Why Obsidian and GitHub?
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;&lt;/strong&gt; is a markdown-based note-taking tool that excels at helping users connect pieces of information in a non-linear fashion. This feature is particularly valuable for technical documentation because it allows you to create a web of interconnected notes that are easy to navigate. Additionally, it supports rich formatting options, including code blocks, tables, and media embedding, which are critical for technical content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;&lt;/strong&gt;, on the other hand, is a widely-used platform for version control and collaboration. It ensures that your documentation is synced with your code, allowing for versioning and team collaboration. With GitHub, you can track changes, manage pull requests, and review updates, making it ideal for teams that need to maintain accurate and up-to-date technical documentation.&lt;/p&gt;
&lt;p&gt;When used together, these two tools allow you to write and maintain comprehensive documentation while keeping it synchronized with your development process.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-obsidian-for-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#setting-up-obsidian-for-documentation&#34;&gt;
        #
    &lt;/a&gt;
    Setting Up Obsidian for Documentation
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;The first step in using Obsidian for technical documentation is setting up your workspace. After downloading and installing &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;, create a dedicated vault for your documentation. A vault is essentially a folder where all your notes are stored. Within this vault, you can organize your content into folders based on categories such as API documentation, architecture notes, or development workflows.&lt;/p&gt;
&lt;p&gt;One of the core strengths of Obsidian is its &lt;strong&gt;bidirectional linking&lt;/strong&gt; feature. This allows you to link related notes seamlessly. For example, if you reference an API endpoint in your architecture documentation, you can link directly to the detailed API documentation, making it easy for readers to navigate between connected concepts. As your documentation grows, you can visualize the relationships between your notes using Obsidian’s &lt;strong&gt;Graph View&lt;/strong&gt;, which shows the links between documents as a dynamic network of nodes.&lt;/p&gt;
&lt;p&gt;In terms of formatting, Obsidian supports markdown, so you can include headings, subheadings, code snippets, tables, and other essential elements for technical documentation. Tagging is another useful feature in Obsidian, allowing you to categorize your notes and easily find related content. By using &lt;strong&gt;metadata and tags&lt;/strong&gt;, you can add context to your documentation and ensure it is well-organized.&lt;/p&gt;
&lt;h2 id=&#34;integrating-obsidian-with-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#integrating-obsidian-with-github&#34;&gt;
        #
    &lt;/a&gt;
    Integrating Obsidian with GitHub
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Once your documentation is set up in Obsidian, the next step is to integrate it with GitHub to enable version control and collaboration. This process involves linking your Obsidian vault with a &lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/create-a-repo&#34;&gt;GitHub repository&lt;/a&gt;. If you haven’t already, create a repository on GitHub specifically for your documentation. This can either be a separate repository or part of an existing project repository.&lt;/p&gt;
&lt;p&gt;To link Obsidian with GitHub, simply store your Obsidian vault inside the local folder where your Git repository is located. After initializing Git in this folder, connect it to your remote GitHub repository by following this &lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/set-up-git&#34;&gt;guide&lt;/a&gt;. From there, you can regularly commit and push changes to GitHub. This workflow ensures that every update to your documentation is versioned and can be tracked or rolled back if necessary.&lt;/p&gt;
&lt;p&gt;In a collaborative environment, GitHub makes it easy for teams to review and contribute to documentation. You can create &lt;strong&gt;&lt;a href=&#34;https://guides.github.com/introduction/flow/&#34;&gt;branches&lt;/a&gt;&lt;/strong&gt; for specific documentation tasks, such as updating API references or adding new sections, and submit &lt;strong&gt;&lt;a href=&#34;https://docs.github.com/en/pull-requests&#34;&gt;pull requests&lt;/a&gt;&lt;/strong&gt; for review. This ensures that documentation changes are carefully reviewed before being merged into the main documentation repository.&lt;/p&gt;
&lt;h2 id=&#34;managing-documentation-changes-with-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#managing-documentation-changes-with-github&#34;&gt;
        #
    &lt;/a&gt;
    Managing Documentation Changes with GitHub
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;GitHub’s powerful version control capabilities make it an ideal platform for managing technical documentation in a professional setting. Using a &lt;strong&gt;branching strategy&lt;/strong&gt; for documentation, similar to how code is managed, allows multiple contributors to work on different parts of the documentation simultaneously without causing conflicts. For instance, if one team member is updating the API documentation and another is refining the architecture overview, they can work in separate branches and merge their changes once approved.&lt;/p&gt;
&lt;p&gt;Automating documentation checks through &lt;strong&gt;&lt;a href=&#34;https://docs.github.com/en/actions/automating-builds-and-tests/about-continuous-integration&#34;&gt;Continuous Integration (CI)&lt;/a&gt;&lt;/strong&gt; is another best practice. &lt;strong&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/strong&gt;, for example, can be used to run markdown linting, check for broken links, or even spell-check your documentation every time changes are pushed. This helps maintain high-quality documentation and prevents errors from slipping through the cracks.&lt;/p&gt;
&lt;p&gt;For large projects, you can also use &lt;strong&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;&lt;/strong&gt; or other static site generators like &lt;strong&gt;&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&#34;https://www.mkdocs.org/&#34;&gt;MkDocs&lt;/a&gt;&lt;/strong&gt;, or &lt;strong&gt;&lt;a href=&#34;https://docusaurus.io/&#34;&gt;Docusaurus&lt;/a&gt;&lt;/strong&gt; to automatically publish your documentation as a static website. This makes the documentation accessible to non-technical stakeholders while keeping it updated with every push to the repository.&lt;/p&gt;
&lt;h2 id=&#34;structuring-technical-documentation-effectively&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#structuring-technical-documentation-effectively&#34;&gt;
        #
    &lt;/a&gt;
    Structuring Technical Documentation Effectively
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Maintaining a clear structure is critical for technical documentation. Start by organizing your documentation into logical sections, such as API references, project architecture, and development processes. Each section should follow a consistent template, with headings for an overview, use cases, code examples, and versioning information.&lt;/p&gt;
&lt;p&gt;As your documentation grows, leveraging Obsidian’s &lt;strong&gt;Graph View&lt;/strong&gt; can be incredibly helpful for identifying gaps or unclear relationships between sections. This visual representation of your notes enables you to keep track of how different documents relate to one another, ensuring that your knowledge base remains well-structured and easy to navigate.&lt;/p&gt;
&lt;h2 id=&#34;keeping-documentation-up-to-date&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#keeping-documentation-up-to-date&#34;&gt;
        #
    &lt;/a&gt;
    Keeping Documentation Up-to-Date
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;One of the key advantages of using GitHub to manage documentation is that it encourages the practice of keeping documentation close to the codebase. This means that whenever the code is updated, the corresponding documentation can be updated as part of the same workflow. By integrating documentation into the development process, you ensure that it remains accurate and relevant throughout the project lifecycle.&lt;/p&gt;
&lt;h2 id=&#34;backups-and-accessibility&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#backups-and-accessibility&#34;&gt;
        #
    &lt;/a&gt;
    Backups and Accessibility
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Storing your documentation in GitHub also provides &lt;strong&gt;&lt;a href=&#34;https://docs.github.com/en/repositories/creating-and-managing-repositories/backing-up-a-repository&#34;&gt;automatic backups&lt;/a&gt;&lt;/strong&gt;. If anything happens to your local files, the latest version of your documentation is always safe and accessible in your GitHub repository. If your repository is private, you can also maintain confidentiality for sensitive information.&lt;/p&gt;
&lt;p&gt;Additionally, &lt;strong&gt;Obsidian&lt;/strong&gt; is an offline-first application, so you can work on your documentation even when you don’t have internet access. This is especially useful for remote work or when traveling.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Obsidian and GitHub to Professionally Write and Organize Technical Documentation</title>
      <link>/posts/using-obsidian-and-github-to-professionally-write-and-organize-technical-documentation/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/using-obsidian-and-github-to-professionally-write-and-organize-technical-documentation/</guid>
      <description>&lt;h2 id=&#34;context&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#context&#34;&gt;
        #
    &lt;/a&gt;
    Context
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;In today’s fast-paced technical environments, clear and well-organized documentation is key to ensuring smooth workflows and successful collaboration. Whether you’re working on API documentation, software architecture overviews, or development processes, managing this information effectively is essential. Two tools that offer a powerful solution for handling technical documentation are &lt;strong&gt;&lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;&lt;/strong&gt;. Together, they provide an efficient system for writing, organizing, and sharing technical documents.&lt;/p&gt;
&lt;p&gt;In this article, we’ll explore how to use Obsidian’s note-taking capabilities in combination with GitHub’s version control and collaborative features to streamline your technical documentation workflow.&lt;/p&gt;
&lt;h2 id=&#34;why-obsidian-and-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#why-obsidian-and-github&#34;&gt;
        #
    &lt;/a&gt;
    Why Obsidian and GitHub?
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;&lt;/strong&gt; is a markdown-based note-taking tool that excels at helping users connect pieces of information in a non-linear fashion. This feature is particularly valuable for technical documentation because it allows you to create a web of interconnected notes that are easy to navigate. Additionally, it supports rich formatting options, including code blocks, tables, and media embedding, which are critical for technical content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;&lt;/strong&gt;, on the other hand, is a widely-used platform for version control and collaboration. It ensures that your documentation is synced with your code, allowing for versioning and team collaboration. With GitHub, you can track changes, manage pull requests, and review updates, making it ideal for teams that need to maintain accurate and up-to-date technical documentation.&lt;/p&gt;
&lt;p&gt;When used together, these two tools allow you to write and maintain comprehensive documentation while keeping it synchronized with your development process.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-obsidian-for-documentation&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#setting-up-obsidian-for-documentation&#34;&gt;
        #
    &lt;/a&gt;
    Setting Up Obsidian for Documentation
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;The first step in using Obsidian for technical documentation is setting up your workspace. After downloading and installing &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;, create a dedicated vault for your documentation. A vault is essentially a folder where all your notes are stored. Within this vault, you can organize your content into folders based on categories such as API documentation, architecture notes, or development workflows.&lt;/p&gt;
&lt;p&gt;One of the core strengths of Obsidian is its &lt;strong&gt;bidirectional linking&lt;/strong&gt; feature. This allows you to link related notes seamlessly. For example, if you reference an API endpoint in your architecture documentation, you can link directly to the detailed API documentation, making it easy for readers to navigate between connected concepts. As your documentation grows, you can visualize the relationships between your notes using Obsidian’s &lt;strong&gt;Graph View&lt;/strong&gt;, which shows the links between documents as a dynamic network of nodes.&lt;/p&gt;
&lt;p&gt;In terms of formatting, Obsidian supports markdown, so you can include headings, subheadings, code snippets, tables, and other essential elements for technical documentation. Tagging is another useful feature in Obsidian, allowing you to categorize your notes and easily find related content. By using &lt;strong&gt;metadata and tags&lt;/strong&gt;, you can add context to your documentation and ensure it is well-organized.&lt;/p&gt;
&lt;h2 id=&#34;integrating-obsidian-with-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#integrating-obsidian-with-github&#34;&gt;
        #
    &lt;/a&gt;
    Integrating Obsidian with GitHub
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Once your documentation is set up in Obsidian, the next step is to integrate it with GitHub to enable version control and collaboration. This process involves linking your Obsidian vault with a &lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/create-a-repo&#34;&gt;GitHub repository&lt;/a&gt;. If you haven’t already, create a repository on GitHub specifically for your documentation. This can either be a separate repository or part of an existing project repository.&lt;/p&gt;
&lt;p&gt;To link Obsidian with GitHub, simply store your Obsidian vault inside the local folder where your Git repository is located. After initializing Git in this folder, connect it to your remote GitHub repository by following this &lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/set-up-git&#34;&gt;guide&lt;/a&gt;. From there, you can regularly commit and push changes to GitHub. This workflow ensures that every update to your documentation is versioned and can be tracked or rolled back if necessary.&lt;/p&gt;
&lt;p&gt;In a collaborative environment, GitHub makes it easy for teams to review and contribute to documentation. You can create &lt;strong&gt;&lt;a href=&#34;https://guides.github.com/introduction/flow/&#34;&gt;branches&lt;/a&gt;&lt;/strong&gt; for specific documentation tasks, such as updating API references or adding new sections, and submit &lt;strong&gt;&lt;a href=&#34;https://docs.github.com/en/pull-requests&#34;&gt;pull requests&lt;/a&gt;&lt;/strong&gt; for review. This ensures that documentation changes are carefully reviewed before being merged into the main documentation repository.&lt;/p&gt;
&lt;h2 id=&#34;managing-documentation-changes-with-github&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#managing-documentation-changes-with-github&#34;&gt;
        #
    &lt;/a&gt;
    Managing Documentation Changes with GitHub
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;GitHub’s powerful version control capabilities make it an ideal platform for managing technical documentation in a professional setting. Using a &lt;strong&gt;branching strategy&lt;/strong&gt; for documentation, similar to how code is managed, allows multiple contributors to work on different parts of the documentation simultaneously without causing conflicts. For instance, if one team member is updating the API documentation and another is refining the architecture overview, they can work in separate branches and merge their changes once approved.&lt;/p&gt;
&lt;p&gt;Automating documentation checks through &lt;strong&gt;&lt;a href=&#34;https://docs.github.com/en/actions/automating-builds-and-tests/about-continuous-integration&#34;&gt;Continuous Integration (CI)&lt;/a&gt;&lt;/strong&gt; is another best practice. &lt;strong&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/strong&gt;, for example, can be used to run markdown linting, check for broken links, or even spell-check your documentation every time changes are pushed. This helps maintain high-quality documentation and prevents errors from slipping through the cracks.&lt;/p&gt;
&lt;p&gt;For large projects, you can also use &lt;strong&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;&lt;/strong&gt; or other static site generators like &lt;strong&gt;&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&#34;https://www.mkdocs.org/&#34;&gt;MkDocs&lt;/a&gt;&lt;/strong&gt;, or &lt;strong&gt;&lt;a href=&#34;https://docusaurus.io/&#34;&gt;Docusaurus&lt;/a&gt;&lt;/strong&gt; to automatically publish your documentation as a static website. This makes the documentation accessible to non-technical stakeholders while keeping it updated with every push to the repository.&lt;/p&gt;
&lt;h2 id=&#34;structuring-technical-documentation-effectively&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#structuring-technical-documentation-effectively&#34;&gt;
        #
    &lt;/a&gt;
    Structuring Technical Documentation Effectively
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Maintaining a clear structure is critical for technical documentation. Start by organizing your documentation into logical sections, such as API references, project architecture, and development processes. Each section should follow a consistent template, with headings for an overview, use cases, code examples, and versioning information.&lt;/p&gt;
&lt;p&gt;As your documentation grows, leveraging Obsidian’s &lt;strong&gt;Graph View&lt;/strong&gt; can be incredibly helpful for identifying gaps or unclear relationships between sections. This visual representation of your notes enables you to keep track of how different documents relate to one another, ensuring that your knowledge base remains well-structured and easy to navigate.&lt;/p&gt;
&lt;h2 id=&#34;keeping-documentation-up-to-date&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#keeping-documentation-up-to-date&#34;&gt;
        #
    &lt;/a&gt;
    Keeping Documentation Up-to-Date
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;One of the key advantages of using GitHub to manage documentation is that it encourages the practice of keeping documentation close to the codebase. This means that whenever the code is updated, the corresponding documentation can be updated as part of the same workflow. By integrating documentation into the development process, you ensure that it remains accurate and relevant throughout the project lifecycle.&lt;/p&gt;
&lt;h2 id=&#34;backups-and-accessibility&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#backups-and-accessibility&#34;&gt;
        #
    &lt;/a&gt;
    Backups and Accessibility
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Storing your documentation in GitHub also provides &lt;strong&gt;&lt;a href=&#34;https://docs.github.com/en/repositories/creating-and-managing-repositories/backing-up-a-repository&#34;&gt;automatic backups&lt;/a&gt;&lt;/strong&gt;. If anything happens to your local files, the latest version of your documentation is always safe and accessible in your GitHub repository. If your repository is private, you can also maintain confidentiality for sensitive information.&lt;/p&gt;
&lt;p&gt;Additionally, &lt;strong&gt;Obsidian&lt;/strong&gt; is an offline-first application, so you can work on your documentation even when you don’t have internet access. This is especially useful for remote work or when traveling.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Diataxis Framework is A Game Changer for Organizing Technical Documentation</title>
      <link>/posts/why-diataxis-framework-is-a-game-changer-for-organizing-technical-documentation/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/why-diataxis-framework-is-a-game-changer-for-organizing-technical-documentation/</guid>
      <description>&lt;h2 id=&#34;context&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#context&#34;&gt;
        #
    &lt;/a&gt;
    Context
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Effective technical documentation is critical to the success of any company, particularly in tech-driven environments where internal teams, partners, and customers rely on precise and accessible information. However, creating and managing high-quality documentation is no easy task. It’s common to end up with scattered, inconsistent, or overly complex content that makes it difficult for users to find what they need, when they need it.&lt;/p&gt;
&lt;p&gt;This is where the Diátaxis Framework comes in: a structured, modern approach to organizing technical documentation that not only streamlines your content but also enhances its usability. Whether you&amp;rsquo;re documenting for developers, end-users, or internal teams,&lt;/p&gt;
&lt;h2 id=&#34;what-is-the-diátaxis-framework&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#what-is-the-di%c3%a1taxis-framework&#34;&gt;
        #
    &lt;/a&gt;
    What is the Diátaxis Framework?
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;The Diátaxis Framework, developed by Daniele Procida, is a model that provides a clear, logical methodology that ensures everyone finds the right information easily, categorizing technical documentation into four distinct types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tutorials&lt;/strong&gt; – Learning-oriented content that guides users through accomplishing a specific task. These are step-by-step instructions for beginners who are unfamiliar with your product or technology.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How-To Guides&lt;/strong&gt; – Goal-oriented content that provides solutions for specific problems. These are practical guides that users can reference to quickly accomplish a particular goal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Explanations&lt;/strong&gt; – Understanding-oriented content that dives deeper into the &amp;ldquo;why&amp;rdquo; of things. It’s designed to clarify complex concepts, providing background information and context to help users gain a solid understanding of how something works.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt; – Information-oriented content that is structured for lookup. This includes API documentation, configuration settings, or any form of technical reference material.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The beauty of Diátaxis lies in its &lt;strong&gt;separation of these distinct documentation needs&lt;/strong&gt;. By organizing your content according to these four categories, users are better able to navigate and use your documentation, making easier for them to find out what they&amp;rsquo;re looking for.&lt;/p&gt;
&lt;h2 id=&#34;why-your-company-needs-diátaxis&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#why-your-company-needs-di%c3%a1taxis&#34;&gt;
        #
    &lt;/a&gt;
    Why Your Company Needs Diátaxis
&lt;/div&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;better-user-experience&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#better-user-experience&#34;&gt;
        ##
    &lt;/a&gt;
    Better User Experience
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Documentation is often created with good intentions but ends up being a patchwork of different types of information. This can be overwhelming for users who don’t know where to start, or who need answers quickly.&lt;/p&gt;
&lt;p&gt;With Diátaxis, you structure content based on user intent. A beginner can go straight to tutorials without getting lost in complex explanations, while a seasoned developer can jump into reference material without having to wade through tutorials or conceptual information. This clear delineation creates a smooth and intuitive experience for users, which boosts efficiency and reduces the learning curve.&lt;/p&gt;
&lt;h3 id=&#34;improved-documentation-maintenance&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#improved-documentation-maintenance&#34;&gt;
        ##
    &lt;/a&gt;
    Improved Documentation Maintenance
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;As technical products evolve, so does the associated documentation. Without a clear organizational structure, documentation can quickly become outdated or inconsistent. The Diátaxis Framework introduces clarity and focus, making it easier for teams to manage, update, and expand the content.&lt;/p&gt;
&lt;p&gt;Each type of content (tutorials, how-tos, explanations, and references) serves a specific purpose, so it becomes simpler to identify what needs updating. Additionally, it prevents duplication of effort, as different types of content won&amp;rsquo;t overlap or contradict each other.&lt;/p&gt;
&lt;h3 id=&#34;tailored-to-different-learning-styles&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#tailored-to-different-learning-styles&#34;&gt;
        ##
    &lt;/a&gt;
    Tailored to Different Learning Styles
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;People learn differently. Some prefer hands-on approaches (tutorials), while others want to read detailed explanations (conceptual content). The Diátaxis Framework recognizes this and provides content for every learning style, ensuring that you cater to a diverse audience.&lt;/p&gt;
&lt;p&gt;By breaking up the documentation into these four categories, you give users the freedom to choose the learning path that works best for them. This also reduces friction and frustration, as users won&amp;rsquo;t need to sift through irrelevant information to get to the content they need.&lt;/p&gt;
&lt;h3 id=&#34;enhanced-onboarding-for-new-users-and-developers&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#enhanced-onboarding-for-new-users-and-developers&#34;&gt;
        ##
    &lt;/a&gt;
    Enhanced Onboarding for New Users and Developers
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;One of the biggest challenges companies face is onboarding new employees or users of a product. Well-structured documentation plays a critical role in reducing onboarding time and ensuring that new team members get up to speed quickly.&lt;/p&gt;
&lt;p&gt;Diátaxis provides a clear roadmap: newcomers can start with tutorials for practical, hands-on experience, refer to how-to guides when tackling specific tasks, and consult explanations for deeper understanding. This structure enables a smoother onboarding process and provides a reliable resource as they grow more confident and independent.&lt;/p&gt;
&lt;h3 id=&#34;consistency-across-teams-and-departments&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#consistency-across-teams-and-departments&#34;&gt;
        ##
    &lt;/a&gt;
    Consistency Across Teams and Departments
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;If your company has multiple teams contributing to technical documentation, maintaining consistency in style, format, and tone can be a nightmare. The Diátaxis Framework creates a standardized approach for documentation creation, regardless of the contributor&amp;rsquo;s technical expertise or writing style.&lt;/p&gt;
&lt;p&gt;Teams can adopt a consistent format for each type of content, ensuring that all documentation follows the same logical flow. This not only makes the documentation easier to use but also helps in managing it long-term, as everyone is working with the same structure in mind.&lt;/p&gt;
&lt;h2 id=&#34;implementing-diátaxis-in-your-company&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#implementing-di%c3%a1taxis-in-your-company&#34;&gt;
        #
    &lt;/a&gt;
    Implementing Diátaxis in Your Company
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Diataxis is easy to implementeverything but a Start by reviewing your existing documentation and identifying where it fits within the four categories. You can then reorganize the content according to the framework.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;ve adopted this approach, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create templates for each type of documentation to maintain consistency.&lt;/li&gt;
&lt;li&gt;Train teams on how to use the framework so that new content is created in line with Diátaxis principles.&lt;/li&gt;
&lt;li&gt;Continuously improve by gathering user feedback and adjusting your documentation structure to meet evolving needs.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
